{"version":3,"file":"static/js/127.df91d285.chunk.js","mappings":"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","sources":["../node_modules/mermaid/src/diagrams/flowchart/flowDiagram-v2.ts","../node_modules/mermaid/src/diagrams/flowchart/flowRenderer-v2.js","../node_modules/mermaid/src/diagrams/flowchart/styles.ts"],"sourcesContent":["// @ts-ignore: TODO Fix ts errors\nimport flowParser from './parser/flow';\nimport flowDb from './flowDb';\nimport flowRendererV2 from './flowRenderer-v2';\nimport flowStyles from './styles';\nimport { MermaidConfig } from '../../config.type';\nimport { setConfig } from '../../config';\n\nexport const diagram = {\n  parser: flowParser,\n  db: flowDb,\n  renderer: flowRendererV2,\n  styles: flowStyles,\n  init: (cnf: MermaidConfig) => {\n    if (!cnf.flowchart) {\n      cnf.flowchart = {};\n    }\n    cnf.flowchart.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    // flowchart-v2 uses dagre-wrapper, which doesn't have access to flowchart cnf\n    setConfig({ flowchart: { arrowMarkerAbsolute: cnf.arrowMarkerAbsolute } });\n    flowRendererV2.setConf(cnf.flowchart);\n    flowDb.clear();\n    flowDb.setGen('gen-2');\n  },\n};\n","import * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { select, curveLinear, selectAll } from 'd3';\n\nimport flowDb from './flowDb';\nimport { getConfig } from '../../config';\nimport utils from '../../utils';\n\nimport { render } from '../../dagre-wrapper/index.js';\nimport { addHtmlLabel } from 'dagre-d3-es/src/dagre-js/label/add-html-label.js';\nimport { log } from '../../logger';\nimport common, { evaluate } from '../common/common';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\n\nconst conf = {};\nexport const setConf = function (cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param vert Object containing the vertices.\n * @param g The graph that is to be drawn.\n * @param svgId\n * @param root\n * @param doc\n * @param diagObj\n */\nexport const addVertices = function (vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = vert[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     * @type {string}\n     */\n    let classStr = 'default';\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(' ');\n    }\n\n    const styles = getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    let vertexText = vertex.text !== undefined ? vertex.text : vertex.id;\n\n    // We create a SVG label, either by delegating to addHtmlLabel or manually\n    let vertexNode;\n    if (evaluate(getConfig().flowchart.htmlLabels)) {\n      // TODO: addHtmlLabel accepts a labelStyle. Do we possibly have that?\n      const node = {\n        label: vertexText.replace(\n          /fa[blrs]?:fa-[\\w-]+/g,\n          (s) => `<i class='${s.replace(':', ' ')}'></i>`\n        ),\n      };\n      vertexNode = addHtmlLabel(svg, node).node();\n      vertexNode.parentNode.removeChild(vertexNode);\n    } else {\n      const svgLabel = doc.createElementNS('http://www.w3.org/2000/svg', 'text');\n      svgLabel.setAttribute('style', styles.labelStyle.replace('color:', 'fill:'));\n\n      const rows = vertexText.split(common.lineBreakRegex);\n\n      for (const row of rows) {\n        const tspan = doc.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n        tspan.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:space', 'preserve');\n        tspan.setAttribute('dy', '1em');\n        tspan.setAttribute('x', '1');\n        tspan.textContent = row;\n        svgLabel.appendChild(tspan);\n      }\n      vertexNode = svgLabel;\n    }\n\n    let radious = 0;\n    let _shape = '';\n    // Set the shape based parameters\n    switch (vertex.type) {\n      case 'round':\n        radious = 5;\n        _shape = 'rect';\n        break;\n      case 'square':\n        _shape = 'rect';\n        break;\n      case 'diamond':\n        _shape = 'question';\n        break;\n      case 'hexagon':\n        _shape = 'hexagon';\n        break;\n      case 'odd':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'lean_right':\n        _shape = 'lean_right';\n        break;\n      case 'lean_left':\n        _shape = 'lean_left';\n        break;\n      case 'trapezoid':\n        _shape = 'trapezoid';\n        break;\n      case 'inv_trapezoid':\n        _shape = 'inv_trapezoid';\n        break;\n      case 'odd_right':\n        _shape = 'rect_left_inv_arrow';\n        break;\n      case 'circle':\n        _shape = 'circle';\n        break;\n      case 'ellipse':\n        _shape = 'ellipse';\n        break;\n      case 'stadium':\n        _shape = 'stadium';\n        break;\n      case 'subroutine':\n        _shape = 'subroutine';\n        break;\n      case 'cylinder':\n        _shape = 'cylinder';\n        break;\n      case 'group':\n        _shape = 'rect';\n        break;\n      case 'doublecircle':\n        _shape = 'doublecircle';\n        break;\n      default:\n        _shape = 'rect';\n    }\n    // Add the node\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === 'group' ? 500 : undefined,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n\n    log.info('setNode', {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding,\n    });\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param {object} edges The edges to add to the graph\n * @param {object} g The graph object\n * @param diagObj\n */\nexport const addEdges = function (edges, g, diagObj) {\n  log.info('abc78 edges = ', edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n\n  let defaultStyle;\n  let defaultLabelStyle;\n\n  if (edges.defaultStyle !== undefined) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n\n  edges.forEach(function (edge) {\n    cnt++;\n\n    // Identify Link\n    var linkIdBase = 'L-' + edge.start + '-' + edge.end;\n    // count the links from+to the same node to give unique id\n    if (linkIdCnt[linkIdBase] === undefined) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info('abc78 new entry', linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + '-' + linkIdCnt[linkIdBase];\n    log.info('abc78 new link id to be used is', linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    var linkNameStart = 'LS-' + edge.start;\n    var linkNameEnd = 'LE-' + edge.end;\n\n    const edgeData = { style: '', labelStyle: '' };\n    edgeData.minlen = edge.length || 1;\n    //edgeData.id = 'id' + cnt;\n\n    // Set link type for rendering\n    if (edge.type === 'arrow_open') {\n      edgeData.arrowhead = 'none';\n    } else {\n      edgeData.arrowhead = 'normal';\n    }\n\n    // Check of arrow types, placed here in order not to break old rendering\n    edgeData.arrowTypeStart = 'arrow_open';\n    edgeData.arrowTypeEnd = 'arrow_open';\n\n    /* eslint-disable no-fallthrough */\n    switch (edge.type) {\n      case 'double_arrow_cross':\n        edgeData.arrowTypeStart = 'arrow_cross';\n      case 'arrow_cross':\n        edgeData.arrowTypeEnd = 'arrow_cross';\n        break;\n      case 'double_arrow_point':\n        edgeData.arrowTypeStart = 'arrow_point';\n      case 'arrow_point':\n        edgeData.arrowTypeEnd = 'arrow_point';\n        break;\n      case 'double_arrow_circle':\n        edgeData.arrowTypeStart = 'arrow_circle';\n      case 'arrow_circle':\n        edgeData.arrowTypeEnd = 'arrow_circle';\n        break;\n    }\n\n    let style = '';\n    let labelStyle = '';\n\n    switch (edge.stroke) {\n      case 'normal':\n        style = 'fill:none;';\n        if (defaultStyle !== undefined) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== undefined) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'solid';\n        break;\n      case 'dotted':\n        edgeData.thickness = 'normal';\n        edgeData.pattern = 'dotted';\n        edgeData.style = 'fill:none;stroke-width:2px;stroke-dasharray:3;';\n        break;\n      case 'thick':\n        edgeData.thickness = 'thick';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 3.5px;fill:none;';\n        break;\n      case 'invisible':\n        edgeData.thickness = 'invisible';\n        edgeData.pattern = 'solid';\n        edgeData.style = 'stroke-width: 0;fill:none;';\n        break;\n    }\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n\n    if (edge.interpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== undefined) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n    }\n\n    edgeData.labelType = 'text';\n    edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n    if (edge.style === undefined) {\n      edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none;';\n    }\n\n    edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n\n    edgeData.id = linkId;\n    edgeData.classes = 'flowchart-link ' + linkNameStart + ' ' + linkNameEnd;\n\n    // Add the edge to the graph\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\n\n/**\n * Returns the all the styles from classDef statements in the graph definition.\n *\n * @param text\n * @param diagObj\n * @returns {object} ClassDef styles\n */\nexport const getClasses = function (text, diagObj) {\n  log.info('Extracting classes');\n  diagObj.db.clear();\n  try {\n    // Parse the graph definition\n    diagObj.parse(text);\n    return diagObj.db.getClasses();\n  } catch (e) {\n    return;\n  }\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text\n * @param id\n */\n\nexport const draw = function (text, id, _version, diagObj) {\n  log.info('Drawing flowchart');\n  diagObj.db.clear();\n  flowDb.setGen('gen-2');\n  // Parse the graph definition\n  diagObj.parser.parse(text);\n\n  // Fetch the default direction, use TD if none was found\n  let dir = diagObj.db.getDirection();\n  if (dir === undefined) {\n    dir = 'TD';\n  }\n\n  const { securityLevel, flowchart: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n\n  // Handle root and document for when rendering in sandbox mode\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n\n  // Create the input mermaid.graph\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: dir,\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 0,\n      marginy: 0,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info('Subgraphs - ', subGraphs);\n  for (let i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    log.info('Subgraph - ', subG);\n    diagObj.db.addVertex(subG.id, subG.title, 'group', undefined, subG.classes, subG.dir);\n  }\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const vert = diagObj.db.getVertices();\n\n  const edges = diagObj.db.getEdges();\n\n  log.info('Edges', edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    // for (let i = 0; i < subGraphs.length; i++) {\n    subG = subGraphs[i];\n\n    selectAll('cluster').append('text');\n\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info('Setting up subgraphs', subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g, diagObj);\n\n  // Add custom shapes\n  // flowChartShapes.addToRenderV2(addShape);\n\n  // Set up an SVG group so that we can translate the final graph.\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  const element = root.select('#' + id + ' g');\n  render(element, g, ['point', 'circle', 'cross'], 'flowchart', id);\n\n  utils.insertTitle(svg, 'flowchartTitleText', conf.titleTopMargin, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf.diagramPadding, conf.useMaxWidth);\n\n  // Index nodes\n  diagObj.db.indexNodes('subGraph' + i);\n\n  // Add label rects for non html labels\n  if (!conf.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n\n  // If node has a link, wrap it in an anchor SVG object.\n  const keys = Object.keys(vert);\n  keys.forEach(function (key) {\n    const vertex = vert[key];\n\n    if (vertex.link) {\n      const node = select('#' + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS('http://www.w3.org/2000/svg', 'a');\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'class', vertex.classes.join(' '));\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'href', vertex.link);\n        link.setAttributeNS('http://www.w3.org/2000/svg', 'rel', 'noopener');\n        if (securityLevel === 'sandbox') {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', '_top');\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS('http://www.w3.org/2000/svg', 'target', vertex.linkTarget);\n        }\n\n        const linkNode = node.insert(function () {\n          return link;\n        }, ':first-child');\n\n        const shape = node.select('.label-container');\n        if (shape) {\n          linkNode.append(function () {\n            return shape.node();\n          });\n        }\n\n        const label = node.select('.label');\n        if (label) {\n          linkNode.append(function () {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\n\nexport default {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw,\n};\n","/** Returns the styles given options */\nexport interface FlowChartStyleOptions {\n  arrowheadColor: string;\n  border2: string;\n  clusterBkg: string;\n  clusterBorder: string;\n  edgeLabelBackground: string;\n  fontFamily: string;\n  lineColor: string;\n  mainBkg: string;\n  nodeBorder: string;\n  nodeTextColor: string;\n  tertiaryColor: string;\n  textColor: string;\n  titleColor: string;\n}\n\nconst getStyles = (options: FlowChartStyleOptions) =>\n  `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span {\n    color: ${options.titleColor};\n  }\n\n  .label text,span {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\n\nexport default getStyles;\n"],"names":["diagram","parser","db","flowDb","renderer","flowRendererV2","styles","flowStyles","init","cnf","flowchart","arrowMarkerAbsolute","setConfig","setConf","clear","setGen","conf","addVertices","vert","g","svgId","root","doc","diagObj","svg","select","concat","Object","keys","forEach","id","vertex","classStr","classes","length","join","vertexNode","getStylesFromArray","vertexText","text","evaluate","getConfig","htmlLabels","node","label","replace","s","addHtmlLabel","parentNode","removeChild","svgLabel","createElementNS","setAttribute","labelStyle","_step","rows","split","common","lineBreakRegex","_iterator","_createForOfIteratorHelper","n","done","row","value","tspan","setAttributeNS","textContent","appendChild","err","e","f","radious","_shape","type","setNode","shape","labelText","rx","ry","class","style","link","linkTarget","tooltip","getTooltip","domId","lookUpDomId","haveCallback","width","dir","props","padding","log","info","addEdges","edges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","interpolate","curve","interpolateToCurve","curveLinear","defaultInterpolate","arrowheadStyle","labelpos","labelType","setEdge","_i","_keys","key","getClasses","parse","draw","_version","getDirection","sandboxElement","_getConfig","securityLevel","conf2","nodeSpacing","rankSpacing","subG","nodes","contentDocument","body","document","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","subGraphs","getSubGraphs","i2","addVertex","title","getVertices","getEdges","i","selectAll","append","j","setParent","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","indexNodes","_step2","labels","querySelectorAll","_iterator2","dim","getBBox","rect","height","insertBefore","firstChild","linkNode","insert","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","clusterBkg","clusterBorder","tertiaryColor","border2"],"sourceRoot":""}