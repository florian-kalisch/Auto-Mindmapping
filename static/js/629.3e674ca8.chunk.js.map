{"version":3,"file":"static/js/629.3e674ca8.chunk.js","mappings":"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","sources":["../node_modules/mermaid/src/diagrams/class/classRenderer-v2.ts","../node_modules/mermaid/src/diagrams/class/classDiagram-v2.ts"],"sourcesContent":["// @ts-ignore d3 types are not available\nimport { select, curveLinear } from 'd3';\nimport * as graphlib from 'dagre-d3-es/src/graphlib/index.js';\nimport { log } from '../../logger';\nimport { getConfig } from '../../config';\nimport { render } from '../../dagre-wrapper/index.js';\nimport utils from '../../utils';\nimport { interpolateToCurve, getStylesFromArray } from '../../utils';\nimport { setupGraphViewbox } from '../../setupGraphViewbox';\nimport common from '../common/common';\nimport { ClassRelation, ClassNote, ClassMap, EdgeData } from './classTypes';\n\nconst sanitizeText = (txt: string) => common.sanitizeText(txt, getConfig());\n\nlet conf = {\n  dividerMargin: 10,\n  padding: 5,\n  textHeight: 10,\n  curve: undefined,\n};\n\n/**\n * Function that adds the vertices found during parsing to the graph to be rendered.\n *\n * @param classes - Object containing the vertices.\n * @param g - The graph that is to be drawn.\n * @param _id - id of the graph\n * @param diagObj - The diagram object\n */\nexport const addClasses = function (\n  classes: ClassMap,\n  g: graphlib.Graph,\n  _id: string,\n  diagObj: any\n) {\n  const keys = Object.keys(classes);\n  log.info('keys:', keys);\n  log.info(classes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  keys.forEach(function (id) {\n    const vertex = classes[id];\n\n    /**\n     * Variable for storing the classes for the vertex\n     */\n    let cssClassStr = '';\n    if (vertex.cssClasses.length > 0) {\n      cssClassStr = cssClassStr + ' ' + vertex.cssClasses.join(' ');\n    }\n\n    const styles = { labelStyle: '', style: '' }; //getStylesFromArray(vertex.styles);\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.label ?? vertex.id;\n    const radius = 0;\n    const shape = 'class_box';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      classData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssClassStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.domId,\n      tooltip: diagObj.db.getTooltip(vertex.id) || '',\n      haveCallback: vertex.haveCallback,\n      link: vertex.link,\n      width: vertex.type === 'group' ? 500 : undefined,\n      type: vertex.type,\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n  });\n};\n\n/**\n * Function that adds the additional vertices (notes) found during parsing to the graph to be rendered.\n *\n * @param notes - Object containing the additional vertices (notes).\n * @param g - The graph that is to be drawn.\n * @param startEdgeId - starting index for note edge\n * @param classes - Classes\n */\nexport const addNotes = function (\n  notes: ClassNote[],\n  g: graphlib.Graph,\n  startEdgeId: number,\n  classes: ClassMap\n) {\n  log.info(notes);\n\n  // Iterate through each item in the vertex object (containing all the vertices found) in the graph definition\n  notes.forEach(function (note, i) {\n    const vertex = note;\n\n    /**\n     * Variable for storing the classes for the vertex\n     *\n     */\n    const cssNoteStr = '';\n\n    const styles = { labelStyle: '', style: '' };\n\n    // Use vertex id as text in the box if no text is provided by the graph definition\n    const vertexText = vertex.text;\n\n    const radius = 0;\n    const shape = 'note';\n    // Add the node\n    const node = {\n      labelStyle: styles.labelStyle,\n      shape: shape,\n      labelText: sanitizeText(vertexText),\n      noteData: vertex,\n      rx: radius,\n      ry: radius,\n      class: cssNoteStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: vertex.id,\n      tooltip: '',\n      type: 'note',\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      padding: getConfig().flowchart?.padding ?? getConfig().class?.padding,\n    };\n    g.setNode(vertex.id, node);\n    log.info('setNode', node);\n\n    if (!vertex.class || !(vertex.class in classes)) {\n      return;\n    }\n    const edgeId = startEdgeId + i;\n\n    const edgeData: EdgeData = {\n      id: `edgeNote${edgeId}`,\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: 'dotted',\n      // Set link type for rendering\n      arrowhead: 'none',\n      //Set edge extra labels\n      startLabelRight: '',\n      endLabelLeft: '',\n      //Set relation arrow types\n      arrowTypeStart: 'none',\n      arrowTypeEnd: 'none',\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf.curve, curveLinear),\n    };\n\n    // Add the edge to the graph\n    g.setEdge(vertex.id, vertex.class, edgeData, edgeId);\n  });\n};\n\n/**\n * Add edges to graph based on parsed graph definition\n *\n * @param relations -\n * @param g - The graph object\n */\nexport const addRelations = function (relations: ClassRelation[], g: graphlib.Graph) {\n  const conf = getConfig().flowchart;\n  let cnt = 0;\n\n  relations.forEach(function (edge) {\n    cnt++;\n    const edgeData: EdgeData = {\n      //Set relationship style and line type\n      classes: 'relation',\n      pattern: edge.relation.lineType == 1 ? 'dashed' : 'solid',\n      id: 'id' + cnt,\n      // Set link type for rendering\n      arrowhead: edge.type === 'arrow_open' ? 'none' : 'normal',\n      //Set edge extra labels\n      startLabelRight: edge.relationTitle1 === 'none' ? '' : edge.relationTitle1,\n      endLabelLeft: edge.relationTitle2 === 'none' ? '' : edge.relationTitle2,\n      //Set relation arrow types\n      arrowTypeStart: getArrowMarker(edge.relation.type1),\n      arrowTypeEnd: getArrowMarker(edge.relation.type2),\n      style: 'fill:none',\n      labelStyle: '',\n      curve: interpolateToCurve(conf?.curve, curveLinear),\n    };\n\n    log.info(edgeData, edge);\n\n    if (edge.style !== undefined) {\n      const styles = getStylesFromArray(edge.style);\n      edgeData.style = styles.style;\n      edgeData.labelStyle = styles.labelStyle;\n    }\n\n    edge.text = edge.title;\n    if (edge.text === undefined) {\n      if (edge.style !== undefined) {\n        edgeData.arrowheadStyle = 'fill: #333';\n      }\n    } else {\n      edgeData.arrowheadStyle = 'fill: #333';\n      edgeData.labelpos = 'c';\n\n      // TODO V10: Flowchart ? Keeping flowchart for backwards compatibility. Remove in next major release\n      if (getConfig().flowchart?.htmlLabels ?? getConfig().htmlLabels) {\n        edgeData.labelType = 'html';\n        edgeData.label = '<span class=\"edgeLabel\">' + edge.text + '</span>';\n      } else {\n        edgeData.labelType = 'text';\n        edgeData.label = edge.text.replace(common.lineBreakRegex, '\\n');\n\n        if (edge.style === undefined) {\n          edgeData.style = edgeData.style || 'stroke: #333; stroke-width: 1.5px;fill:none';\n        }\n\n        edgeData.labelStyle = edgeData.labelStyle.replace('color:', 'fill:');\n      }\n    }\n    // Add the edge to the graph\n    g.setEdge(edge.id1, edge.id2, edgeData, cnt);\n  });\n};\n\n/**\n * Merges the value of `conf` with the passed `cnf`\n *\n * @param cnf - Config to merge\n */\nexport const setConf = function (cnf: any) {\n  conf = {\n    ...conf,\n    ...cnf,\n  };\n};\n\n/**\n * Draws a flowchart in the tag with id: id based on the graph definition in text.\n *\n * @param text -\n * @param id -\n * @param _version -\n * @param diagObj -\n */\nexport const draw = function (text: string, id: string, _version: string, diagObj: any) {\n  log.info('Drawing class - ', id);\n\n  // TODO V10: Why flowchart? Might be a mistake when copying.\n  const conf = getConfig().flowchart ?? getConfig().class;\n  const securityLevel = getConfig().securityLevel;\n  log.info('config:', conf);\n  const nodeSpacing = conf?.nodeSpacing ?? 50;\n  const rankSpacing = conf?.rankSpacing ?? 50;\n\n  // Create the input mermaid.graph\n  const g: graphlib.Graph = new graphlib.Graph({\n    multigraph: true,\n    compound: true,\n  })\n    .setGraph({\n      rankdir: diagObj.db.getDirection(),\n      nodesep: nodeSpacing,\n      ranksep: rankSpacing,\n      marginx: 8,\n      marginy: 8,\n    })\n    .setDefaultEdgeLabel(function () {\n      return {};\n    });\n\n  // Fetch the vertices/nodes and edges/links from the parsed graph definition\n  const classes: ClassMap = diagObj.db.getClasses();\n  const relations: ClassRelation[] = diagObj.db.getRelations();\n  const notes: ClassNote[] = diagObj.db.getNotes();\n  log.info(relations);\n  addClasses(classes, g, id, diagObj);\n  addRelations(relations, g);\n  addNotes(notes, g, relations.length + 1, classes);\n\n  // Set up an SVG group so that we can translate the final graph.\n  let sandboxElement;\n  if (securityLevel === 'sandbox') {\n    sandboxElement = select('#i' + id);\n  }\n  const root =\n    securityLevel === 'sandbox'\n      ? // @ts-ignore Ignore type error for now\n\n        select(sandboxElement.nodes()[0].contentDocument.body)\n      : select('body');\n  // @ts-ignore Ignore type error for now\n  const svg = root.select(`[id=\"${id}\"]`);\n\n  // Run the renderer. This is what draws the final graph.\n  // @ts-ignore Ignore type error for now\n  const element = root.select('#' + id + ' g');\n  render(\n    element,\n    g,\n    ['aggregation', 'extension', 'composition', 'dependency', 'lollipop'],\n    'classDiagram',\n    id\n  );\n\n  utils.insertTitle(svg, 'classTitleText', conf?.titleTopMargin ?? 5, diagObj.db.getDiagramTitle());\n\n  setupGraphViewbox(g, svg, conf?.diagramPadding, conf?.useMaxWidth);\n\n  // Add label rects for non html labels\n  if (!conf?.htmlLabels) {\n    // @ts-ignore Ignore type error for now\n    const doc = securityLevel === 'sandbox' ? sandboxElement.nodes()[0].contentDocument : document;\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      // Get dimensions of label\n      const dim = label.getBBox();\n\n      const rect = doc.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      rect.setAttribute('rx', 0);\n      rect.setAttribute('ry', 0);\n      rect.setAttribute('width', dim.width);\n      rect.setAttribute('height', dim.height);\n\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n};\n\n/**\n * Gets the arrow marker for a type index\n *\n * @param type - The type to look for\n * @returns The arrow marker\n */\nfunction getArrowMarker(type: number) {\n  let marker;\n  switch (type) {\n    case 0:\n      marker = 'aggregation';\n      break;\n    case 1:\n      marker = 'extension';\n      break;\n    case 2:\n      marker = 'composition';\n      break;\n    case 3:\n      marker = 'dependency';\n      break;\n    case 4:\n      marker = 'lollipop';\n      break;\n    default:\n      marker = 'none';\n  }\n  return marker;\n}\n\nexport default {\n  setConf,\n  draw,\n};\n","import { DiagramDefinition } from '../../diagram-api/types';\n// @ts-ignore: TODO Fix ts errors\nimport parser from './parser/classDiagram';\nimport db from './classDb';\nimport styles from './styles';\nimport renderer from './classRenderer-v2';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.class) {\n      cnf.class = {};\n    }\n    cnf.class.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  },\n};\n"],"names":["sanitizeText","txt","common","getConfig","conf","dividerMargin","padding","textHeight","curve","getArrowMarker","type","marker","renderer","setConf","cnf","_objectSpread","draw","text","id","_version","diagObj","_getConfig$flowchart","_ref4","_ref5","_ref6","log","info","conf2","flowchart","class","securityLevel","sandboxElement","nodeSpacing","rankSpacing","g","graphlib","multigraph","compound","setGraph","rankdir","db","getDirection","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","classes","getClasses","relations","getRelations","notes","getNotes","_id","keys","Object","forEach","_vertex$label","_ref","vertex","cssClassStr","cssClasses","length","join","styles2","vertexText","label","node","labelStyle","shape","labelText","classData","rx","ry","style","domId","tooltip","getTooltip","haveCallback","link","width","_a","_b","setNode","addClasses","cnt","edge","_ref3","edgeData","pattern","relation","lineType","arrowhead","startLabelRight","relationTitle1","endLabelLeft","relationTitle2","arrowTypeStart","type1","arrowTypeEnd","type2","interpolateToCurve","curveLinear","getStylesFromArray","title","arrowheadStyle","labelpos","htmlLabels","labelType","replace","lineBreakRegex","setEdge","id1","id2","addRelations","startEdgeId","note","i","_ref2","noteData","edgeId","concat","addNotes","select","root","nodes","contentDocument","body","svg","element","render","utils","insertTitle","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","_step","doc","document","labels","querySelectorAll","_iterator","_createForOfIteratorHelper","s","n","done","value","dim","getBBox","rect","createElementNS","setAttribute","height","insertBefore","firstChild","err","e","f","diagram","parser","styles","init","arrowMarkerAbsolute","clear"],"sourceRoot":""}